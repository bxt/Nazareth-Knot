<%

require_relative '../helpers.rb'

size = 500
thickness = 40 # 30
r = 150
n = 6
s = symmetry(n)
angle = s[1]
star_angle = (0.5 - 2.0/n)*Math::PI

ring = s.map { |angle| p(0, -r).rotate2d(angle).to2d_s }

both = [:even?, :odd?].map do |predicate|
  ring.select.with_index{ |_,i| i.send(predicate) }
end

chain = if n.even?
  both.map{ |ps| ps.join(' L ') }.join(' Z M ')
else
  both.flatten.join(' L ')
end

# Trigonometry FTW!
half_arm = r*Math.sin(angle)
mid_to_intersection = r*Math.tan(angle/2)*Math.cos(angle)
star_overhead = thickness/2/Math.tan(star_angle)
intersection_overhead = (thickness*Math.tan(star_angle) + thickness/Math.cos(star_angle))/2
half_free_room = (half_arm-mid_to_intersection-star_overhead-intersection_overhead)/2
stroke_dashes = StrokeDash.new(
  -star_overhead-half_free_room,
  half_free_room+intersection_overhead+mid_to_intersection,
  half_arm+star_overhead+half_free_room)

page_intro("Generic Knot n=#{n}")

%>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" xml:lang="en" viewBox="<%= -size/2 %> <%= -size/2 %> <%= size %> <%= size %>" id="knot">
  <defs>
    <style>
      /* .bottom { opacity: 0.6; } */
      .top, .bottom { stroke-width: <%= thickness %>px; fill: none; }
      .a { stroke: #8ED8B9; }
      .white { stroke-width: <%= thickness+5 %>px; fill: none; stroke: #fff; }
      .a.top { <%= stroke_dashes.css %> }
      .a.top.white { <%= stroke_dashes.css(2) %> }
    </style>
    <path id="path-a" d="M <%= chain %> Z" />
  </defs>
  <use xlink:href="#path-a" class="a bottom white" />
  <use xlink:href="#path-a" class="a bottom" />
  <use xlink:href="#path-a" class="a top white" />
  <use xlink:href="#path-a" class="a top" />
</svg>
